/* ==========================================================================
   #FLEXBOX
   ========================================================================== */

$flex-direction: true !default;
$flex-justify-content: true !default;
$flex-align-items: true !default;
$flex-wrap: true !default;
$flex-align-self: true !default;

/* Direction */

$flex-direction-values: (
  "flex-row": row,
  "flex-row-reverse": row-reverse,
  "flex-column": column,
  "flex-column-reverse": column-reverse
) !default;

@mixin flex-direction($flex-direction-values, $breakpoint: null) {
  // Loop through the flex-direction values
  @each $name, $flex-direction-value in $flex-direction-values {
    // Make a rule in the format `.flex-row[@<breakpoint>]`
    $rule: ".#{$name}#{$breakpoint}";
    // Build it
    #{$rule} {
      flex-direction: $flex-direction-value !important;
    }
  }
}

// Check if enabled
@if $flex-direction == true {
  // Global helpers
  @include flex-direction($flex-direction-values);
  // Responsive helpers
  @if (variable-exists(mq-breakpoints)) {
    @each $bp-name, $bp-value in $mq-breakpoints {
      @include mq($from: $bp-name) {
        @include flex-direction($flex-direction-values, \@#{$bp-name});
      }
    }
  }
}

// Justify content

$flex-justify-content-values: (
  "justify-start": flex-start,
  "justify-center": center,
  "justify-end": flex-end,
  "justify-between": space-between,
  "justify-around": space-around
) !default;

@mixin flex-justify-content($flex-justify-content-values, $breakpoint: null) {
  // Loop through the justify content values.
  @each $name, $flex-justify-content-value in $flex-justify-content-values {
    // Make a rule in the format `.justify-start[@<breakpoint>]`.
    $rule: ".#{$name}#{$breakpoint}";

    // Build it.
    #{$rule} {
      justify-content: $flex-justify-content-value !important;
    }
  }
}

// Check if enabled.
@if $flex-justify-content == true {
  // Global helpers.
  @include flex-justify-content($flex-justify-content-values);

  // Responsive helpers.
  @if (variable-exists(mq-breakpoints)) {
    @each $bp-name, $bp-value in $mq-breakpoints {
      @include mq($from: $bp-name) {
        @include flex-justify-content(
          $flex-justify-content-values,
          \@#{$bp-name}
        );
      }
    }
  }
}

// Align items

$flex-align-items-values: (
 "items-stretch": stretch,
 "items-start": flex-start,
 "items-end": flex-end,
 "items-center": center,
 "items-baseline": baseline
) !default;

@mixin flex-align-items($flex-align-items-values, $breakpoint: null) {
  // Loop through the align item values.
  @each $name, $flex-align-items-value in $flex-align-items-values {
    // Make a rule in the format `.items-stretch[@<breakpoint>]`.
    $rule: ".#{$name}#{$breakpoint}";

    // Build it.
    #{$rule} {
      align-items: $flex-align-items-value !important;
    }
  }
}

// Check if enabled.
@if $flex-align-items == true {
  // Global helpers.
  @include flex-align-items($flex-align-items-values);

  // Responsive helpers.
  @if (variable-exists(mq-breakpoints)) {
    @each $bp-name, $bp-value in $mq-breakpoints {
      @include mq($from: $bp-name) {
        @include flex-align-items($flex-align-items-values, \@#{$bp-name});
      }
    }
  }
}

// Wrap

$flex-wrap-values: (
  "flex-wrap": wrap,
  "flex-no-wrap": no-wrap,
  "flex-wrap-reverse": wrap-reverse
) !default;

@mixin flex-wrap($flex-wrap-values, $breakpoint: null) {
  // Loop through the wrap values.
  @each $name, $flex-wrap-value in $flex-wrap-values {
    // Make a rule in the format `.flex-wrap[@<breakpoint>]`.
    $rule: ".#{$name}#{$breakpoint}";

    // Build it.
    #{$rule} {
      flex-wrap: $flex-wrap-value !important;
    }
  }
}

// Check if enabled.
@if $flex-wrap == true {
  // Global helpers.
  @include flex-wrap($flex-wrap-values);

  // Responsive helpers.
  @if (variable-exists(mq-breakpoints)) {
    @each $bp-name, $bp-value in $mq-breakpoints {
      @include mq($from: $bp-name) {
        @include flex-wrap($flex-wrap-values, \@#{$bp-name});
      }
    }
  }
}

// Align self

$flex-align-self-values: (
  "self-auto": auto,
  "self-start": flex-start,
  "self-center": center,
  "self-end": flex-end,
  "self-stretch": stretch
) !default;

@mixin flex-align-self($flex-align-self-values, $breakpoint: null) {
  // Loop through the align-self values.
  @each $name, $flex-align-self-value in $flex-align-self-values {
    // Make a rule in the format `.self-auto[@<breakpoint>]`.
    $rule: ".#{$name}#{$breakpoint}";

    // Build it.
    #{$rule} {
      align-self: $flex-align-self-value !important;
    }
  }
}

// Check if enabled.
@if $flex-align-self == true {
  // Global helpers.
  @include flex-align-self($flex-align-self-values);

  // Responsive helpers.
  @if (variable-exists(mq-breakpoints)) {
    @each $bp-name, $bp-value in $mq-breakpoints {
      @include mq($from: $bp-name) {
        @include flex-align-self($flex-align-self-values, \@#{$bp-name});
      }
    }
  }
}

// Align content

$flex-align-content-values: (
  "content-start": flex-start,
  "content-center": center,
  "content-end": flex-end,
  "content-between": space-between,
  "content-around": space-around
) !default;

@mixin flex-align-content($flex-align-content-values, $breakpoint: null) {
  // Loop through the align-content values.
  @each $name, $flex-align-content-value in $flex-align-content-values {
    // Make a rule in the format `.content-start[@<breakpoint>]`.
    $rule: ".#{$name}#{$breakpoint}";

    // Build it.
    #{$rule} {
      align-content: $flex-align-content-value !important;
    }
  }
}

// Check if enabled.
@if $flex-align-content == true {
  // Global helpers.
  @include flex-align-content($flex-align-content-values);

  // Responsive helpers.
  @if (variable-exists(mq-breakpoints)) {
    @each $bp-name, $bp-value in $mq-breakpoints {
      @include mq($from: $bp-name) {
        @include flex-align-content($flex-align-content-values, \@#{$bp-name});
      }
    }
  }
}
