/* ==========================================================================
   #FLEXBOX
   ========================================================================== */

$flex-direction: true !default;
$flex-justify-content: true !default;
$flex-align-items: true !default;
$flex-wrap: true !default;
$flex-align-self: true !default;

/* Direction */

$flex-direction-values: (
  row,            // The direction text is laid out in a line
  row-reverse,    // Like <row>, but reversed
  column,         // The direction in which lines of text are stacked
  column-reverse,  // Like <column>, but reversed

  // Global values
  inherit,
  initial,
  unset
) !default;

@mixin flex-direction($flex-direction-values, $breakpoint: null) {
  // Loop through the flex-direction values
  @each $flex-direction-value in $flex-direction-values {
    // Make a rule in the format `.u-flex-direction-row[@<breakpoint>]`
    $rule: ".u-flex-direction-#{$flex-direction-value}#{$breakpoint}";
    // Build it
    #{$rule} {
      flex-direction: $flex-direction-value !important;
    }
  }
}

// Check if enabled
@if $flex-direction == true {
  // Global helpers
  @include flex-direction($flex-direction-values);
  // Responsive helpers
  @if (variable-exists(mq-breakpoints)) {
    @each $bp-name, $bp-value in $mq-breakpoints {
      @include mq($from: $bp-name) {
        @include flex-direction($flex-direction-values, \@#{$bp-name});
      }
    }
  }
}

// Justify content

$flex-justify-content-values: (
  // Positional alignment
  center,     // Pack items around the center
  start,      // Pack items from the start
  end,        // Pack items from the end
  flex-start, // Pack flex items from the end
  flex-end,   // Pack flex items from the end
  left,       // Pack items from the left
  right,      // Pack items from the right
 
  // Normal alignment
  normal,
  
  // Distributed alignment
  space-between,  // Distribute items evenly. The first item is flush with the start, the last is flush with the end
  space-around,   // Distribute items evenly. Items have a half-size space on either end
  space-evenly,   // Distribute items evenly. Items have equal space around them 
  stretch, // Distribute items evenly. Stretch 'auto'-sized items to fit the container

  // Overflow alignment
  safe center,
  unsafe center

  //Global values
  inherit,
  initial,
  unset,

) !default;

@mixin flex-justify-content($flex-justify-content-values, $breakpoint: null) {
  // Loop through the justify content values.
  @each $flex-justify-content-value in $flex-justify-content-values {
    // Make a rule in the format `.u-flex-justify-content-start[@<breakpoint>]`.
    $rule: ".u-flex-justify-content-#{$flex-justify-content-value}#{$breakpoint}";

    // Build it.
    #{$rule} {
      justify-content: $flex-justify-content-value !important;
    }
  }
}

// Check if enabled.
@if $flex-justify-content == true {
  // Global helpers.
  @include flex-justify-content($flex-justify-content-values);

  // Responsive helpers.
  @if (variable-exists(mq-breakpoints)) {
    @each $bp-name, $bp-value in $mq-breakpoints {
      @include mq($from: $bp-name) {
        @include flex-justify-content(
          $flex-justify-content-values,
          \@#{$bp-name}
        );
      }
    }
  }
}

// Align items

$flex-align-items-values: (
  // Basic keywords 
  normal, 
  stretch, 

  // Positional alignment 
  center,       // Pack items around the center 
  start,        // Pack items from the start 
  end,          // Pack items from the end 
  flex-start,   // Pack flex items from the start 
  flex-end,     // Pack flex items from the end

  // Baseline alignment
  baseline, 
  first baseline, 
  last baseline,    // Overflow alignment (for positional alignment only) 
  safe center, 
  unsafe center, 

  // Global values
  inherit, 
  initial, 
  unset,
) !default;

@mixin flex-align-items($flex-align-items-values, $breakpoint: null) {
  // Loop through the align item values.
  @each $flex-align-items-value in $flex-align-items-values {
    // Make a rule in the format `.u-flex-align-items-start[@<breakpoint>]`.
    $rule: ".u-flex-align-items-#{$flex-align-items-value}#{$breakpoint}";

    // Build it.
    #{$rule} {
      align-items: $flex-align-items-value !important;
    }
  }
}

// Check if enabled.
@if $flex-align-items == true {
  // Global helpers.
  @include flex-align-items($flex-align-items-values);

  // Responsive helpers.
  @if (variable-exists(mq-breakpoints)) {
    @each $bp-name, $bp-value in $mq-breakpoints {
      @include mq($from: $bp-name) {
        @include flex-align-items($flex-align-items-values, \@#{$bp-name});
      }
    }
  }
}

// Wrap

$flex-wrap-values: (
  nowrap,
  wrap,
  wrap-reverse,

  // Global values
  inherit,
  initial,
  unset
) !default;

@mixin flex-wrap($flex-wrap-values, $breakpoint: null) {
  // Loop through the wrap values.
  @each $flex-wrap-value in $flex-wrap-values {
    // Make a rule in the format `.u-flex-wrap-wrap[@<breakpoint>]`.
    $rule: ".u-flex-wrap-#{$flex-wrap-value}#{$breakpoint}";

    // Build it.
    #{$rule} {
      flex-wrap: $flex-wrap-value !important;
    }
  }
}

// Check if enabled.
@if $flex-wrap == true {
  // Global helpers.
  @include flex-wrap($flex-wrap-values);

  // Responsive helpers.
  @if (variable-exists(mq-breakpoints)) {
    @each $bp-name, $bp-value in $mq-breakpoints {
      @include mq($from: $bp-name) {
        @include flex-wrap($flex-wrap-values, \@#{$bp-name});
      }
    }
  }
}

 // Align self

$flex-align-self-values: (
  // Keyword values 
  auto, 
  normal, 

  // Positional alignment 
  center,     // Put the item around the center 
  start,      // Put the item at the start 
  end,        // Put the item at the end 
  self-start, // Align the item flush at the start 
  self-end,   // Align the item flush at the end 
  flex-start, // Put the flex item at the start 
  flex-end,   // Put the flex item at the end 

  // Baseline alignment 
  baseline, 
  first baseline, 
  last baseline, 
  stretch,    // Stretch 'auto'-sized items to fit the container 

  // Overflow alignment 
  safe center, 
  unsafe center, 

  // Global values 
  inherit, 
  initial, 
  unset
) !default;

@mixin flex-align-self($flex-align-self-values, $breakpoint: null) {
  // Loop through the align-self values.
  @each $flex-align-self-value in $flex-align-self-values {
    // Make a rule in the format `.u-flex-align-self-flex-start[@<breakpoint>]`.
    $rule: ".u-flex-align-self-#{$flex-align-self-value}#{$breakpoint}";

    // Build it.
    #{$rule} {
      align-self: $flex-align-self-value !important;
    }
  }
}

// Check if enabled.
@if $flex-align-self == true {
  // Global helpers.
  @include flex-align-self($flex-align-self-values);

  // Responsive helpers.
  @if (variable-exists(mq-breakpoints)) {
    @each $bp-name, $bp-value in $mq-breakpoints {
      @include mq($from: $bp-name) {
        @include flex-align-self($flex-align-self-values, \@#{$bp-name});
      }
    }
  }
}
