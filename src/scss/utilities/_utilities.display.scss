/* ==========================================================================
   #DISPLAY
   ========================================================================== */

$displays: true !default;
$display-aliases: true !default;

//Responsive display helpers.

// Optionally, inuitcss can generate display helper classes. E.g.:
//
//   .u-display-block
//   .u-display-inline-block
//   .u-display-none

$displays: false !default;
$display-values: (
  none,
  inline,
  inline-block,
  block,
  flex,
  inline-flex
) !default;

// Optionally, inuitcss can generate display helper aliases. E.g.:
//
//   .u-show
//   .u-hide@tablet
//   .u-hide
//   .u-show@tablet

$display-aliases: false !default;
$display-alias-definitions: (
  none: hide,
  block: show,
) !default;

// A mixin to spit out our display classes.
//
//   .u-display-none@tablet

@mixin displays($display-values, $breakpoint: null) {
  // Loop through the display values.
  @each $display-value in $display-values {
    // Make a rule in the format `.u-display-block[@<breakpoint>]`.
    $rule: ".u-display-#{$display-value}#{$breakpoint}";

    // Add alias to rule if exists.
    $alias: map-get($display-alias-definitions, $display-value);
    @if $display-aliases == true and $alias != null {
      $rule: $rule + ", .u-#{$alias}#{$breakpoint}";
    }

    // Build it.
    #{$rule} {
      display: $display-value !important;
    }
  }
}

// Check if enabled.
@if $displays == true {
  // Global helpers.
  @include displays($display-values);

  // Responsive helpers.
  @if (variable-exists(mq-breakpoints)) {
    @each $bp-name, $bp-value in $mq-breakpoints {
      @include mq($from: $bp-name) {
        @include displays($display-values, \@#{$bp-name});
      }
    }
  }
}
